//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IUserService")]
    public interface IUserService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Addition", ReplyAction="http://tempuri.org/IUserService/AdditionResponse")]
        double Addition(double firstnumber, double secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Addition", ReplyAction="http://tempuri.org/IUserService/AdditionResponse")]
        System.Threading.Tasks.Task<double> AdditionAsync(double firstnumber, double secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Substraction", ReplyAction="http://tempuri.org/IUserService/SubstractionResponse")]
        double Substraction(double firstnumber, double secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Substraction", ReplyAction="http://tempuri.org/IUserService/SubstractionResponse")]
        System.Threading.Tasks.Task<double> SubstractionAsync(double firstnumber, double secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Multiplication", ReplyAction="http://tempuri.org/IUserService/MultiplicationResponse")]
        double Multiplication(double firstnumber, double secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Multiplication", ReplyAction="http://tempuri.org/IUserService/MultiplicationResponse")]
        System.Threading.Tasks.Task<double> MultiplicationAsync(double firstnumber, double secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Division", ReplyAction="http://tempuri.org/IUserService/DivisionResponse")]
        double Division(double firstnumber, double secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Division", ReplyAction="http://tempuri.org/IUserService/DivisionResponse")]
        System.Threading.Tasks.Task<double> DivisionAsync(double firstnumber, double secondnumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IUserServiceChannel : ServiceReference1.IUserService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IUserService>, ServiceReference1.IUserService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UserServiceClient() : 
                base(UserServiceClient.GetDefaultBinding(), UserServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IUserService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(UserServiceClient.GetBindingForEndpoint(endpointConfiguration), UserServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UserServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UserServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public double Addition(double firstnumber, double secondnumber)
        {
            return base.Channel.Addition(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<double> AdditionAsync(double firstnumber, double secondnumber)
        {
            return base.Channel.AdditionAsync(firstnumber, secondnumber);
        }
        
        public double Substraction(double firstnumber, double secondnumber)
        {
            return base.Channel.Substraction(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<double> SubstractionAsync(double firstnumber, double secondnumber)
        {
            return base.Channel.SubstractionAsync(firstnumber, secondnumber);
        }
        
        public double Multiplication(double firstnumber, double secondnumber)
        {
            return base.Channel.Multiplication(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicationAsync(double firstnumber, double secondnumber)
        {
            return base.Channel.MultiplicationAsync(firstnumber, secondnumber);
        }
        
        public double Division(double firstnumber, double secondnumber)
        {
            return base.Channel.Division(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<double> DivisionAsync(double firstnumber, double secondnumber)
        {
            return base.Channel.DivisionAsync(firstnumber, secondnumber);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserService))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:7272/UserService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return UserServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IUserService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return UserServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IUserService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IUserService,
        }
    }
}
